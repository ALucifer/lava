security:
    encoders:
      App\Entity\User: bcrypt
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        in_memory: { memory: ~ }
        user_provider:
          entity:
            class: App\Entity\User
            property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            form_login:
              # Login route
              login_path: security_connexion
              # Checking ROute use by Symfony
              check_path: security_connexion
            # Tell firewall to authenticate user via user_provider
            http_basic: ~
            provider: user_provider

            # Logout user
            logout_on_user_change: true
            logout:
              # Logout route
              path: /logout
              #Target after logout
              target: /

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    role_hierarchy:
        ROLE_UTILISATEUR: [ROLE_USER, ROLE_CAN_DO_BOOKING, ROLE_CAN_SEE_CALENDAR]
        ROLE_SECRETARY:   [ROLE_USER, ROLE_CAN_SEE_CALENDAR, ROLE_CAN_EDIT_ROOM]
        ROLE_ADMIN:       [ROLE_USER, ROLE_CAN_ADD_ROOM, ROLE_CAN_REMOVE_ROOM]
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
